/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-50.511256708000744, -18.02454874257099],
          [-50.511256708000744, -18.117079719511423],
          [-50.36671782860621, -18.117079719511423],
          [-50.36671782860621, -18.02454874257099]]], null, false),
    table = ee.FeatureCollection("users/deniscortevieira/LimitePolitico/Brasil_IBGE");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var area1 = ee.Geometry.Point([-50.4428489,-18.06179753])
print(area1)

var area2 = ee.Geometry.Point([-50.45962056,-18.07493158])

var crop_mask = ee.Image("projects/mapbiomas-workspace/public/collection5/mapbiomas_collection50_integration_v1")

Map.addLayer(crop_mask, {},'crop_mask')
Map.addLayer(area2, {},'Area2')
Map.addLayer(area1, {},'Area1')

Map.centerObject(area1)

//Determina o periodo de estudo
var start = ee.Date('2021-01-05');

var currentDate = Date.now();
var finish = ee.Date(currentDate);

// Funções
var cloudShadowL8 = function(image) {//conforme USGS_2018_LANDSAT 8 SURFACE REFLECTANCE CODE (LASRC) PRODUCT
  var bitCloudShadow = ee.Number(2).pow(3).int();
  
  var bqa = image.select(['pixel_qa']);
  
  var maskCloudShadow = bqa.bitwiseAnd(bitCloudShadow).gt(0);
  
  return (maskCloudShadow).neq(1);
};

var cloudsL8 = function(image) {//conforme USGS_2018_LANDSAT 8 SURFACE REFLECTANCE CODE (LASRC) PRODUCT
  var bitCloud = ee.Number(2).pow(5).int();
  
  var bqa = image.select(['pixel_qa']);
  
  var maskCloud = bqa.bitwiseAnd(bitCloud).gt(0);
  
  return (maskCloud).neq(1);
};

var maskCloudsL8 = function(image) {
  var c = cloudsL8(image);
  var cs = cloudShadowL8(image);
  image = image.updateMask(c);
  return image.updateMask(cs);
};

var cloudsS2 = function(image) {
  // Select the QA band.
  var QA = image.select(['QA60']).toInt().bitCount();
  var cloudMask = QA.gte(1);
  
  return (cloudMask).neq(1);
  // Return an image masking out cloudy areas.
};

var maskCloudsS2 = function(image) {
  var c = cloudsS2(image);
  return image.updateMask(c);
};


function NDVI (image) {
  return image.addBands(image.normalizedDifference(['B5', 'B4'])
                        .set('system:time_start', image.get('system:time_start'))
                        .set('system:index', image.get('system:index'))
                        .rename('NDVI'));
}  



function generateDates (week){
  
  return start.advance(week,'week');
  
}

//Função para interar sobre a lista de datas
function weeklyMosaics(date, newlist) {
  //Cria variaveis que recebem as informações de data e lista de imagens
  date = ee.Date(date);
  newlist = ee.List(newlist);
  
  //Filtra a coleção de imagens por data, de ano em ano
  var filtered = collection.filterDate(date, date.advance(1,'week'));
  
  //Faz o mosaico pela soma das imagens para aoi e indica o ano como propriedade da imagem
  var image = ee.Image(filtered.max())//.rename('NDVI')
                .set('system:time_start', date.advance(1,'week').millis());
  
  // Adiciona a imagem para a lista somente se a coleção tem imagem (evita de adicionar variaveis vazias para a coleção de imagens)
  return ee.List(ee.Algorithms.If(filtered.size(), newlist.add(image), newlist));
}


function mapFunc(feat) {
  var geom = feat.geometry();
  
  var addProp = function(img, f) {
    var newf = ee.Feature(f);
    
    var date = img.date().format('yyyy-MM-dd');
    
    var ndvi = img.reduceRegion(ee.Reducer.median(), geom, 20).get('NDVI');
    
    return ee.Feature(ee.Algorithms.If(ndvi,
                                       newf.set(date, ee.Number(ndvi)),
                                       newf.set(date, ee.Number(-1))));
  };
  var newfeat = ee.Feature(weekNdviCollection.iterate(addProp, feat));
  
  return newfeat;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

var s2Collection = ee.ImageCollection("COPERNICUS/S2_SR")
                      .select(['B2','B3','B4','B8A','B11','QA60'])
                      .filterDate(start, finish)
                      .filterBounds(table);
//print(s2Collection);
 

var l8Collection = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
                      .select(['B2','B3','B4','B5','B6','pixel_qa'])
                      .filterDate(start, finish)
                      .filterBounds(table);
//print(l8Collection);

s2Collection = s2Collection.map(maskCloudsS2).select(['B2','B3','B4','B8A','B11'])
                                             .map(function(image){return image.rename(['B2','B3','B4','B5','B6'])});
l8Collection = l8Collection.map(maskCloudsL8);

var mergeCollection = s2Collection.merge(l8Collection).sort('system:time_start', true);


var ndviL8Collection = l8Collection.map(NDVI);

var ndviS2Collection = s2Collection.map(NDVI);

var collection = ndviS2Collection.merge(ndviL8Collection).sort('system:time_start', true);
print(collection);

//Diferença em anos entre a data inicial (start) e final (finish)
var diff = ee.Number(finish.difference(start, 'week')).round();
print(diff);

//Cria uma lista com todas as datas
var range = ee.List.sequence(0, diff, 1).map(generateDates);
print(range);

var weekNdviCollection = ee.ImageCollection(ee.List(range.iterate(weeklyMosaics, ee.List([])))).select(['NDVI']);
print(weekNdviCollection);

var trueColorCollection = ee.ImageCollection(ee.List(range.iterate(weeklyMosaics, ee.List([])))).select(['B2','B3','B4'])
                                                          .map(function(image){
                                                            image = image.divide(ee.Image.constant(10000))
                                                                         .multiply(ee.Image.constant(255))
                                                                         .set('system:time_start', image.get('system:time_start'));
                                                            return image.toUint8()});
print(trueColorCollection);

var falseColorCollection = ee.ImageCollection(ee.List(range.iterate(weeklyMosaics, ee.List([])))).select(['B4','B5','B6'])
                                                           .map(function(image){
                                                             image = image.divide(ee.Image.constant(10000))
                                                                          .multiply(ee.Image.constant(255))
                                                                          .set('system:time_start', image.get('system:time_start'));
                                                             return image.toUint8()});
print(falseColorCollection);



Map.addLayer(weekNdviCollection.first().clip(geometry), {}, 'Imagem')
Map.addLayer(trueColorCollection.first().clip(table), {}, 'trueColorCollection')
Map.addLayer(falseColorCollection.first().clip(table), {}, 'falseColorCollection')

Export.image.toAsset({
   image: falseColorCollection.first().clip(table),
   description : 'falseColor', 
   assetId: 'falseColor',
   region: table,
   scale: 30, // define a resolução espacial de saída
   maxPixels: 1e13
 });