var Brasil = ee.FeatureCollection('projects/base-vetorial-municipio-solo/assets/Brasil_IBGE');
Map.centerObject(Brasil, 4);

// var operations = ee.FeatureCollection('users/victorprudente/inverno_2021')


var operations = ee.FeatureCollection('users/denisvieira/lote_1_ft')
                    .merge(ee.FeatureCollection('users/denisvieira/lote_2_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_3_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_4_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_5_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_6_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_7_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_8_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_9_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_10_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_11_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_12_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_13_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_14_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_15_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_16_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_17_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_18_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_19_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_20_ft'))
                    .merge(ee.FeatureCollection('users/denisvieira/lote_21_ft'))
                    .merge(ee.FeatureCollection('users/Monitoramento/Propostas_analise_extra'))
                    .merge(ee.FeatureCollection('users/Monitoramento/proposta_38785'))
                    .merge(ee.FeatureCollection('users/Monitoramento/proposta_44562'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210916'))
                    .merge(ee.FeatureCollection('users/Monitoramento/46771_ForaFluxo'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210920'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210921'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210922'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210923'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210927'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210928'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20210930'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211006'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211007'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211011'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211013'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211018'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211019'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211020'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211021'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211025'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211026'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211029'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211103'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211109'))
                    .merge(ee.FeatureCollection('users/Monitoramento/propostas_fora_fluxo_20211117'));
                    
var dateStart = ee.Date("2020-12-01");
var currentDate = Date.now();
var dateFinish = ee.Date(currentDate);
var dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
                  .filter(ee.Filter.date(dateStart, currentDate))
                  .filterBounds(operations);
var precipitation = dataset.select('precipitation');
var precipitationVis = {
  min: 1.0,
  max: 17.0,
  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],
};


var imageCollection = precipitation

// var imageCollection = s1_preprocces_view
var band1='precipitation'


var polc = ["precipitation"]
var polCollection = imageCollection.map(function(image) {
  return image.select(polc)//.addBands(image.select('VH').divide(image.select('VV')).rename("ratio"));
});

// var visParams = {gamma: 1, min: [-25, -30,1], max: [0, 0, 3], bands: ['VV', 'VH', 'ratio'], opacity:1};
// var visParams = {gamma: 1, min: [-20, -20,1], max: [0, 0, 3], bands: [band1, band2, band3], opacity:1};

var generate_polChart = function(point){
  // Create an Pol chart.
  var polChart = ui.Chart.image.series(polCollection, point, ee.Reducer.mean(), 20);
  polChart.setOptions({
      title: 'Perfil temporal da '+polc,
      vAxis:{title: polc, viewWindow: {max:100, min:0}},
      hAxis: {title: 'Data', format: 'MM-yy', gridlines: {count: 9}, viewWindow: {
             max: dateStart.millis().getInfo(),
             min: dateFinish.millis().getInfo()
           }},
      color: "green"
  });
  //panel.widgets().set(2, ndviChart);
  // Add the chart to the map.
  polChart.style().set({
    position: 'bottom-left',
    width: '400px',
    height: '240px'
  });
  return polChart;
};



var dot;
var stretchOption;


var applyStretch = function(img,geometryStretch){
  var imgLayer = ui.Map.Layer(ee.Image(img.first()), precipitationVis, 'Imagem');
  return imgLayer;
};

// var symbol = {
//   refresh: 'ðŸ”„',
// };

var operToOper = function(insertionOperation) {
    var interestOperation = ee.Algorithms.String(insertionOperation).getInfo();
    var operationCenterZoom = ee.FeatureCollection(operations
                          .filter(ee.Filter.eq("proposta", interestOperation)))
                          .sort('proposta', true);
                          
    var numberGlebas = operationCenterZoom.size().getInfo();
                          
    var operation = ee.FeatureCollection(operations
                          .filter(ee.Filter.eq("proposta", interestOperation)))
                          .style({color: 'black', fillColor: '11ffee00'});
                          
    var glebaDict = ee.FeatureCollection(operationCenterZoom).map(function(feature) {
    var dict = {
        value: feature.get('id_kml'),
        label: feature.get('id_kml'), 
      };
      return ee.Feature(feature.geometry(), dict);
    });
    
    var features = glebaDict.getInfo().features;
    
    var selectItems = [];
    for (var i = 0; i < features.length; i++) {
      selectItems.push({
        label: ee.Algorithms.String(features[i]['properties']['label']).getInfo(),
        value: ee.Algorithms.String(features[i]['properties']['value']).getInfo()
    })}
                          
    panel.clear();
    //Map.clear();
    
    panel.add(ui.Label('Proposta: ' + interestOperation), {position: 'bottom-left', fontWeight: 'bold'});
    panel.add(ui.Label('Total de PolÃ­gonos: ' + numberGlebas), {position: 'bottom-left', fontWeight: 'bold'});
    
    var glebaOperation = function(value){
      var centerizedGleba = operationCenterZoom.filter(ee.Filter.eq('id_kml', ee.Algorithms.String(value)));
      var selectedGleba = operationCenterZoom.filter(ee.Filter.eq('id_kml', ee.Algorithms.String(value)))
                    .style({color: 'blue', fillColor: '11ffee00'});
      
      var Imgs_dict = imageCollection.filterBounds(centerizedGleba).map(function(feature) {

        var dict = {
          value: feature.id(),
          label: feature.date().format('dd/MM/yyyy'),//.format('YYY-MM-dd'),
          //label: ee.String(satellite).cat(feature.date().format('YYY-MM-dd')),
        };
        return ee.Feature(feature.geometry(), dict);
      });
      
      var imgList = Imgs_dict.getInfo().features;
      //print(imgList);
      var selected_imgs = [];
      for (var i = 0; i < imgList.length; i++) {
        selected_imgs.push({
          label: imgList[i]['properties']['label'],
          value: imgList[i]['properties']['value']
        });
      }
      
      var find_centroid = function(feature){
        return feature.geometry().centroid();
      };
      var centroid = find_centroid(centerizedGleba);
      
      var point = ee.Geometry.Point(centroid.coordinates());
      dot = ui.Map.Layer(point, {color: '#000000'}, "Ponto");
      
      var index = ee.Number(2);
      
      var map_UL = ui.Map();
      //map_UL.add(ui.Label('Upper-left'))
      //map_UL.add(ui.Label('Clique em uma das janelas para plotar o perfil temporal do NDVI'));
      map_UL.centerObject(centerizedGleba, 14);
      map_UL.addLayer(operation, null, 'Proposta');
      map_UL.addLayer(selectedGleba, null, 'Item');
      map_UL.setControlVisibility(false);
      map_UL.setControlVisibility({mapTypeControl: true}); // NÃ£o permite sobrescrever a imagem jÃ¡ em tela 
      map_UL.layers().set(index.getInfo(), dot);
      
      var map_UR = ui.Map();
      //map_UR.add(ui.Label('Upper-right'))
      map_UR.centerObject(centerizedGleba, 14);
      map_UR.addLayer(operation, null, 'Proposta');
      map_UR.addLayer(selectedGleba, null, 'Item');
      map_UR.setControlVisibility(false);
      
      var map_LL = ui.Map();
      //map_LL.add(ui.Label('Lower-left'))
      map_LL.centerObject(centerizedGleba, 14);
      map_LL.addLayer(operation, null, 'Proposta');
      map_LL.addLayer(selectedGleba, null, 'Item');
      map_LL.setControlVisibility(false);
      
      var map_LR = ui.Map();
      //map_LR.add(ui.Label('Lower_right'))
      map_LR.centerObject(centerizedGleba, 14);
      map_LR.addLayer(operation, null, 'Proposta');
      map_LR.addLayer(selectedGleba, null, 'Item');
      map_LR.setControlVisibility(false);
      
      var linker = ui.Map.Linker([map_UL, map_LL, map_UR, map_LR]);

      // Create panels to hold lon/lat values.
      var lon = ui.Label();
      var lat = ui.Label();

      // Create a grid of maps.
      var mapGrid = ui.Panel(
        [
          ui.Panel([map_UL, map_LL], null, {stretch: 'both'}),
          ui.Panel([map_UR, map_LR], null, {stretch: 'both'})
        ],
        ui.Panel.Layout.Flow('horizontal'), {stretch: 'both'}
      );
      
      // Add the maps and title to the ui.root.
      ui.root.widgets().reset([mapGrid, panel]);
      ui.root.setLayout(ui.Panel.Layout.Flow('horizontal'));
      
      var polChart = generate_polChart(point);
      
      // Register a callback on the default map to be invoked when the map is clicked.
      var click_pol = function(coords){
        // Update the lon/lat panel with values from the click event.
        lon.setValue('lon: ' + coords.lon.toFixed(2)),
        lat.setValue('lat: ' + coords.lat.toFixed(2));
        
        // Add a red dot for the point clicked on.
        var point = ee.Geometry.Point(coords.lon, coords.lat);
        dot = ui.Map.Layer(point, {color: '#000000'}, "Ponto");
        
        //print(map_UL.layers());
        map_UL.layers().set(index.getInfo(), dot);
        //print(map_UL.layers());
        
        // Create an NDVI chart.
        var polChart = generate_polChart(point);
        
        //panel.add(ndviChart);
        panel.widgets().set(8, polChart);
      };
      
      map_UL.onClick(click_pol);
      map_UR.onClick(click_pol);
      map_LL.onClick(click_pol);
      map_LR.onClick(click_pol);
      
      // Campos para selecionar datas das imagens a serem exibidas em cada grid
      var operation_all = ui.Map.Layer(operation, null, "Proposta");
      var glebaNow = ui.Map.Layer(selectedGleba, null, "Item");
      
      // Definindo as imagens em tela e suas respectivas datas como variÃ¡vels globais (para aplicar contraste)
      var image_UL;
      var date_UL;
      var image_UR;
      var date_UR;
      var image_LL;
      var date_LL;
      var image_LR;
      var date_LR;
      
      var showImage = function(map, imgLayer, data){
        map.clear();
        map.setControlVisibility(false);
        map.add(ui.Label(data));
        map.layers().reset([imgLayer]);
        map.addLayer(operation, null, 'Proposta');
        map.addLayer(selectedGleba, null, 'Item');
        
        index = ee.Number(3); // To include the point layer as the fourth layer
        map.onClick(click_pol);
        
        try{
          map_UL.layers().set(index.getInfo(), dot);
        }
        catch(err){} // Do nothing because map_UL already contains this layer 
      };
      
      var select_img_UL = ui.Select({
        items: selected_imgs,
        onChange: function(value){
          image_UL = imageCollection.filter(ee.Filter.eq('system:index', value));
          
          // area para computar o contraste
          var boundsStretch = ee.List(map_UL.getBounds());//oeste, sul, leste, norte
          
          var geometryStretch = ee.Geometry.Polygon([[boundsStretch.get(0), boundsStretch.get(3)],
                                                    [boundsStretch.get(0), boundsStretch.get(1)],
                                                    [boundsStretch.get(2), boundsStretch.get(1)],
                                                    [boundsStretch.get(2), boundsStretch.get(3)]]);
          
          var imgLayer = applyStretch(image_UL,geometryStretch);
          date_UL = ee.Date(image_UL.getInfo().features[0].properties['system:time_start']).format('dd/MM/yyyy').getInfo();
          showImage(map_UL, imgLayer, date_UL);
          //map_UL.setControlVisibility({mapTypeControl: true}); // NÃ£o permite sobrescrever a imagem jÃ¡ em tela 
        }
      });
      
      var select_img_UR = ui.Select({
        items: selected_imgs,
        onChange:function(value){
          image_UR = imageCollection.filter(ee.Filter.eq('system:index', value));
          
          //area para computar o contraste
          var boundsStretch = ee.List(map_UR.getBounds());//oeste, sul, leste, norte
          
          var geometryStretch = ee.Geometry.Polygon([[boundsStretch.get(0), boundsStretch.get(3)],
                                                     [boundsStretch.get(0), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(3)]]);
          
          var imgLayer = applyStretch(image_UR, geometryStretch);
          date_UR = ee.Date(image_UR.getInfo().features[0].properties['system:time_start']).format('dd/MM/yyyy').getInfo();
          showImage(map_UR, imgLayer, date_UR);
        }
      });
      
      var select_img_LL = ui.Select({
        items: selected_imgs,
        onChange:function(value){
          image_LL = imageCollection.filter(ee.Filter.eq('system:index', value));
          
          //area para computar o contraste
          var boundsStretch = ee.List(map_LL.getBounds());//oeste, sul, leste, norte
          
          var geometryStretch = ee.Geometry.Polygon([[boundsStretch.get(0), boundsStretch.get(3)],
                                                     [boundsStretch.get(0), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(3)]]);
          
          var imgLayer = applyStretch(image_LL, geometryStretch);
          date_LL = ee.Date(image_LL.getInfo().features[0].properties['system:time_start']).format('dd/MM/yyyy').getInfo();
          showImage(map_LL, imgLayer, date_LL);
        }
      });
      
      var select_img_LR = ui.Select({
        items: selected_imgs,
        onChange:function(value){
          image_LR = imageCollection.filter(ee.Filter.eq('system:index', value));
          
          //area para computar o contraste
          var boundsStretch = ee.List(map_LR.getBounds());//oeste, sul, leste, norte
          
          var geometryStretch = ee.Geometry.Polygon([[boundsStretch.get(0), boundsStretch.get(3)],
                                                     [boundsStretch.get(0), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(1)],
                                                     [boundsStretch.get(2), boundsStretch.get(3)]]);
          
          var imgLayer = applyStretch(image_LR, geometryStretch);
          date_LR = ee.Date(image_LR.getInfo().features[0].properties['system:time_start']).format('dd/MM/yyyy').getInfo();
          showImage(map_LR, imgLayer, date_LR);
        }
      });
      
      select_img_UL.setPlaceholder('Escolha uma imagem (Upper-left)...');
      select_img_UR.setPlaceholder('Escolha uma imagem (Upper-right)...');
      select_img_LL.setPlaceholder('Escolha uma imagem (Lower-left)...');
      select_img_LR.setPlaceholder('Escolha uma imagem (Lower-right)...');
      

      panel.widgets().set(4, ui.Panel([select_img_UL], ui.Panel.Layout.flow('horizontal')), {position: 'bottom-left', fontWeight: 'bold'});
      panel.widgets().set(5, ui.Panel([select_img_UR], ui.Panel.Layout.flow('horizontal')), {position: 'bottom-left', fontWeight: 'bold'});
      panel.widgets().set(6, ui.Panel([select_img_LL], ui.Panel.Layout.flow('horizontal')), {position: 'bottom-left', fontWeight: 'bold'});
      panel.widgets().set(7, ui.Panel([select_img_LR], ui.Panel.Layout.flow('horizontal')), {position: 'bottom-left', fontWeight: 'bold'});
      
      panel.widgets().set(8, polChart);
      
      map_UL.style().set('cursor', 'crosshair');
      map_UR.style().set('cursor', 'crosshair');
      map_LL.style().set('cursor', 'crosshair');
      map_LR.style().set('cursor', 'crosshair');
      
      panel.widgets().set(9, ui.Textbox({
          placeholder: "Informe o NÂº da Proposta de Interesse",
          onChange: operToOper,
          style: {width: '250px'}
        }));
        
      
    };
    
    if (numberGlebas == 1){
      panel.add(ui.Label('Area 1'), {position: 'bottom-left', fontWeight: 'bold'});
      glebaOperation(ee.Algorithms.String(features[0]['properties']['value']).getInfo());
    }
    else if(numberGlebas > 1){
      var glebaSelection = ui.Select({
        items: selectItems,
        onChange: glebaOperation,
        //value: 'Area 1'
      }).setPlaceholder('Selecione um PolÃ­gono');
      
      panel.add(glebaSelection, {position: 'bottom-left', fontWeight: 'bold'});
      // Alguns data estÃ£o sendo duplicadas na lista ao inserir a linha abaixo para jÃ¡ iniciar processando para a Area 1
      //glebaOperation(ee.Algorithms.String(features[0]['properties']['value']).getInfo());
    }
    else{
      panel.add(ui.Textbox({
          placeholder: "Informe o NÂº da Proposta de Interesse",
          onChange: operToOper,
          style: {width: '250px'}
        }));
    }
};

// Painel com opÃ§Ãµes de manipulaÃ§Ã£o de dados
var panel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '400px'}
});



var insertOperation = ui.Textbox({
  placeholder: "Informe o NÂº da Proposta de Interesse",
  onChange: operToOper,
  style: {width: '250px'}
});

panel.add(insertOperation);

panel.add(ui.Button({
  label: 'Confirma Proposta Informada',
  onClick: insertOperation
}));

// Adicionando o painel na interface
ui.root.add(panel);